// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: proto/core/block/tail.proto

package block

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CommitVote struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PublicKey     []byte                 `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Signature     []byte                 `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitVote) Reset() {
	*x = CommitVote{}
	mi := &file_proto_core_block_tail_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitVote) ProtoMessage() {}

func (x *CommitVote) ProtoReflect() protoreflect.Message {
	mi := &file_proto_core_block_tail_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitVote.ProtoReflect.Descriptor instead.
func (*CommitVote) Descriptor() ([]byte, []int) {
	return file_proto_core_block_tail_proto_rawDescGZIP(), []int{0}
}

func (x *CommitVote) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *CommitVote) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type Tail struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CommitVotes   []*CommitVote          `protobuf:"bytes,1,rep,name=commit_votes,json=commitVotes,proto3" json:"commit_votes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tail) Reset() {
	*x = Tail{}
	mi := &file_proto_core_block_tail_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tail) ProtoMessage() {}

func (x *Tail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_core_block_tail_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tail.ProtoReflect.Descriptor instead.
func (*Tail) Descriptor() ([]byte, []int) {
	return file_proto_core_block_tail_proto_rawDescGZIP(), []int{1}
}

func (x *Tail) GetCommitVotes() []*CommitVote {
	if x != nil {
		return x.CommitVotes
	}
	return nil
}

var File_proto_core_block_tail_proto protoreflect.FileDescriptor

const file_proto_core_block_tail_proto_rawDesc = "" +
	"\n" +
	"\x1bproto/core/block/tail.proto\x12\x05block\"I\n" +
	"\n" +
	"CommitVote\x12\x1d\n" +
	"\n" +
	"public_key\x18\x01 \x01(\fR\tpublicKey\x12\x1c\n" +
	"\tsignature\x18\x02 \x01(\fR\tsignature\"<\n" +
	"\x04Tail\x124\n" +
	"\fcommit_votes\x18\x01 \x03(\v2\x11.block.CommitVoteR\vcommitVotesBJZHgithub.com/andantan/p2p-pbft-modular-blockchain-network/proto/core/blockb\x06proto3"

var (
	file_proto_core_block_tail_proto_rawDescOnce sync.Once
	file_proto_core_block_tail_proto_rawDescData []byte
)

func file_proto_core_block_tail_proto_rawDescGZIP() []byte {
	file_proto_core_block_tail_proto_rawDescOnce.Do(func() {
		file_proto_core_block_tail_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_core_block_tail_proto_rawDesc), len(file_proto_core_block_tail_proto_rawDesc)))
	})
	return file_proto_core_block_tail_proto_rawDescData
}

var file_proto_core_block_tail_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_proto_core_block_tail_proto_goTypes = []any{
	(*CommitVote)(nil), // 0: block.CommitVote
	(*Tail)(nil),       // 1: block.Tail
}
var file_proto_core_block_tail_proto_depIdxs = []int32{
	0, // 0: block.Tail.commit_votes:type_name -> block.CommitVote
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_proto_core_block_tail_proto_init() }
func file_proto_core_block_tail_proto_init() {
	if File_proto_core_block_tail_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_core_block_tail_proto_rawDesc), len(file_proto_core_block_tail_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_core_block_tail_proto_goTypes,
		DependencyIndexes: file_proto_core_block_tail_proto_depIdxs,
		MessageInfos:      file_proto_core_block_tail_proto_msgTypes,
	}.Build()
	File_proto_core_block_tail_proto = out.File
	file_proto_core_block_tail_proto_goTypes = nil
	file_proto_core_block_tail_proto_depIdxs = nil
}
